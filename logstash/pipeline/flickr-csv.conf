input {
  # Read CSV file
  file {
    path => "/data/csv/photo_metadata.csv"
    start_position => "beginning"
    sincedb_path => "/dev/null"  # Process file from start each time
    codec => plain {
      charset => "UTF-8"
    }
  }
}

filter {
  # Parse CSV
  csv {
    separator => ","
    columns => [
      "id", "userid", "title", "tags", "latitude", "longitude", 
      "views", "date_taken", "date_uploaded", "accuracy",
      "flickr_secret", "flickr_server", "flickr_farm", "x", "y", "z"
    ]
    skip_header => true
  }

  # Skip header row
  if [id] == "id" {
    drop { }
  }

  # Convert data types
  mutate {
    convert => {
      "id" => "string"
      "userid" => "string"
      "latitude" => "float"
      "longitude" => "float"
      "views" => "integer"
      "accuracy" => "integer"
      "flickr_farm" => "integer"
      "flickr_server" => "string"
      "x" => "float"
      "y" => "float"
      "z" => "float"
    }
  }

  # Parse tags (remove curly braces and split)
  mutate {
    gsub => [
      "tags", "[\{\}]", ""
    ]
  }
  
  mutate {
    split => { "tags" => "," }
  }

  # Parse dates
  date {
    match => [ "date_taken", "yyyy-MM-dd HH:mm:ss" ]
    target => "date_taken_parsed"
  }

  date {
    match => [ "date_uploaded", "yyyy-MM-dd HH:mm:ss" ]
    target => "date_uploaded_parsed"
  }

  # Construct Flickr image URL
  mutate {
    add_field => {
      "image_url" => "http://farm%{flickr_farm}.staticflickr.com/%{flickr_server}/%{id}_%{flickr_secret}.jpg"
    }
  }

  # Create geo_point for location
  if [latitude] and [longitude] {
    mutate {
      add_field => {
        "[location][lat]" => "%{latitude}"
        "[location][lon]" => "%{longitude}"
      }
    }
    
    mutate {
      convert => {
        "[location][lat]" => "float"
        "[location][lon]" => "float"
      }
    }
  }

  # Add metadata
  mutate {
    add_field => {
      "indexed_at" => "%{@timestamp}"
      "source" => "flickr"
      "image_status" => "pending_download"
    }
  }

  # Remove unnecessary fields
  mutate {
    remove_field => [ "message", "host", "path", "@version", "x", "y", "z" ]
  }
}

output {
  # Send to Elasticsearch
  elasticsearch {
    hosts => ["${ELASTICSEARCH_HOSTS:elasticsearch:9200}"]
    index => "flickr_images"
    document_id => "%{id}"
    action => "index"
  }

  # Debug output (optional - comment out for production)
  stdout {
    codec => rubydebug
  }
}
